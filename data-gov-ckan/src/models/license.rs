/*
 * CKAN API
 *
 * Comprehensive Open Data Knowledge (CKAN) REST API for data management and publishing.  CKAN is a powerful data management system that makes data accessible by providing tools to streamline publishing, sharing, finding and using data. This API provides programmatic access to all CKAN functionality including:  - Dataset (Package) management - create, read, update, delete datasets - Resource management - manage files and data resources within datasets   - Organization and Group management - organize datasets into logical groupings - User management - manage user accounts and permissions - Search functionality - powerful search across all data - Metadata and tagging - rich metadata and taxonomy support - Data validation and quality - ensure data integrity  The API follows REST principles and returns JSON responses. Most endpoints support both GET and POST methods.  ## API Versions  - **API v3** (default): Main action API at `/api/3/action/{action}` - **Utility API v1/v2**: Autocomplete and utility functions at `/api/{version}/util/` - **Legacy API v1**: Basic API information at `/api/1`  ## Authentication  Many API calls require authentication via API key passed as: - HTTP Header: `Authorization: {api_key}` - URL Parameter: `?api_key={api_key}`  - POST Data: `{\"api_key\": \"{api_key}\"}`  ## Error Handling  All API responses include: - `success`: Boolean indicating if the request was successful - `result`: The actual data (on success) or error details (on failure) - `help`: URL to documentation for the action  Error responses include structured error information with error type and detailed messages. 
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct License {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "maintainer", skip_serializing_if = "Option::is_none")]
    pub maintainer: Option<String>,
    #[serde(rename = "family", skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,
    #[serde(rename = "is_okd_compliant", skip_serializing_if = "Option::is_none")]
    pub is_okd_compliant: Option<bool>,
    #[serde(rename = "is_osi_compliant", skip_serializing_if = "Option::is_none")]
    pub is_osi_compliant: Option<bool>,
    #[serde(rename = "domain_content", skip_serializing_if = "Option::is_none")]
    pub domain_content: Option<bool>,
    #[serde(rename = "domain_data", skip_serializing_if = "Option::is_none")]
    pub domain_data: Option<bool>,
    #[serde(rename = "domain_software", skip_serializing_if = "Option::is_none")]
    pub domain_software: Option<bool>,
}

impl License {
    pub fn new() -> License {
        License {
            id: None,
            title: None,
            url: None,
            maintainer: None,
            family: None,
            is_okd_compliant: None,
            is_osi_compliant: None,
            domain_content: None,
            domain_data: None,
            domain_software: None,
        }
    }
}

